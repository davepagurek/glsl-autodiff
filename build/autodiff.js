/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it uses a non-standard name for the exports (exports).
(() => {
var exports = __webpack_exports__;
/*!******************!*\
  !*** ./index.ts ***!
  \******************/

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AutoDiff = void 0;
class Op {
    constructor(ad, ...params) {
        this.usedIn = [];
        this.ad = ad;
        this.id = ad.getNextID();
        this.dependsOn = params;
        for (const param of params) {
            param.usedIn.push(this);
        }
    }
    ref() {
        if (this.usedIn.length > 1) {
            return `_glslad_v${this.id}`;
        }
        else {
            return `(${this.definition()})`;
        }
    }
    derivRef(param) {
        if (this.usedIn.length > 1) {
            return `_glslad_dv${this.id}_d${param.name}`;
        }
        else {
            return `(${this.derivative(param)})`;
        }
    }
    initializer() {
        if (this.usedIn.length > 1) {
            return `float ${this.ref()}=${this.definition()};\n`;
        }
        else {
            return '';
        }
    }
    derivInitializer(param) {
        if (this.usedIn.length > 1) {
            return `float ${this.derivRef(param)}=${this.derivative(param)};\n`;
        }
        else {
            return '';
        }
    }
    isConst() {
        return this.dependsOn.every((op) => op.isConst());
    }
    deepDependencies() {
        const deps = new Set();
        for (const op of this.dependsOn) {
            for (const dep of op.deepDependencies().values()) {
                deps.add(dep);
            }
            deps.add(op);
        }
        return deps;
    }
    add(...params) { return this.ad.add(this, ...params); }
    sum(...params) { return this.ad.sum(this, ...params); }
    sub(b) { return this.ad.sub(this, b); }
    neg() { return this.ad.neg(this); }
    mult(...params) { return this.ad.mult(this, ...params); }
    div(b) { return this.ad.div(this, b); }
    pow(b) { return this.ad.pow(this, b); }
    sqrt() { return this.ad.sqrt(this); }
    sin() { return this.ad.sin(this); }
    cos() { return this.ad.cos(this); }
    tan() { return this.ad.cos(this); }
    mix(b, mix) { return this.ad.mix(this, b, mix); }
    clamp(min, max) { return this.ad.clamp(this, min, max); }
    min(other) { return this.ad.min(this, other); }
    max(other) { return this.ad.max(this, other); }
    ifelse(thenOp, elseOp) { return this.ad.ifelse(this, thenOp, elseOp); }
    output(name) { return this.ad.output(name, this); }
    outputDeriv(name, param) { return this.ad.outputDeriv(name, param, this); }
}
class OpLiteral extends Op {
    initializer() { return ''; }
    derivInitializer() { return ''; }
    ref() { return this.definition(); }
    derivRef(param) { return this.derivative(param); }
}
class Param extends OpLiteral {
    constructor(ad, name) {
        super(ad);
        this.name = name;
    }
    isConst() { return false; }
    definition() { return this.name; }
    derivative(param) {
        if (param === this) {
            return '1.0';
        }
        else {
            return '0.0';
        }
    }
}
class Value extends OpLiteral {
    constructor(ad, val) {
        super(ad);
        this.val = val;
    }
    isConst() { return true; }
    definition() { return `${this.val.toFixed(4)}`; }
    derivative() { return '0.0'; }
}
class Neg extends Op {
    definition() {
        return `-${this.dependsOn[0].ref()}`;
    }
    derivative(param) {
        return '-' + this.dependsOn[0].derivRef(param);
    }
}
class Sum extends Op {
    definition() {
        return this.dependsOn.map((op) => op.ref()).join('+');
    }
    derivative(param) {
        return this.dependsOn.map((op) => op.derivRef(param)).join('+');
    }
}
class Mult extends Op {
    definition() {
        return this.dependsOn.map((op) => op.ref()).join('*');
    }
    derivative(param) {
        const [f, g] = this.dependsOn;
        return `${f.ref()}*${g.derivRef(param)}+${g.ref()}*${f.derivRef(param)}`;
    }
}
class Div extends Op {
    definition() {
        return this.dependsOn.map((op) => op.ref()).join('/');
    }
    derivative(param) {
        const [f, g] = this.dependsOn;
        return `(${f.derivRef(param)}*${g.ref()}-${g.derivRef(param)}*${f.ref()})/(${g.ref()}*${g.ref()})`;
    }
}
class Pow extends Op {
    definition() {
        return `pow(${this.dependsOn[0].ref()},${this.dependsOn[1].ref()})`;
    }
    derivative(param) {
        const [a, b] = this.dependsOn;
        if (b.isConst()) {
            return `${b.ref()}*pow(${a.ref()},${b.ref()}-1.0)`;
        }
        else {
            return `pow(${a.ref()},${b.ref()})*log(${a.ref()})*${b.derivRef(param)}`;
        }
    }
}
class Sin extends Op {
    definition() {
        return `sin(${this.dependsOn[0].ref()})`;
    }
    derivative(param) {
        return `cos(${this.dependsOn[0].ref()})*${this.dependsOn[0].derivRef(param)}`;
    }
}
class Cos extends Op {
    definition() {
        return `cos(${this.dependsOn[0].ref()})`;
    }
    derivative(param) {
        return `-sin(${this.dependsOn[0].ref()})*${this.dependsOn[0].derivRef(param)}`;
    }
}
class Mix extends Op {
    definition() {
        return `mix(${this.dependsOn.map((op) => op.ref()).join(',')})`;
    }
    derivative(param) {
        const [a, b, mix] = this.dependsOn;
        const aDeriv = `(1.0-${a.ref()})*${mix.derivRef(param)}+(-${a.derivRef(param)})*${mix.ref()}`;
        const bDeriv = `${b.ref()}*${mix.derivRef(param)}+${b.derivRef(param)}*${mix.ref()}`;
        return `${aDeriv}+${bDeriv}`;
    }
}
class Clamp extends Op {
    definition() {
        return `clamp(${this.dependsOn.map((op) => op.ref()).join(',')})`;
    }
    derivative(param) {
        const [v, min, max] = this.dependsOn;
        return `${v.ref()}<${min.ref()} ? 0.0 : (${v.ref()}>${max.ref()} ? 0.0 : ${v.derivRef(param)})`;
    }
}
class Min extends Op {
    definition() {
        return `min(${this.dependsOn.map((op) => op.ref()).join(',')})`;
    }
    derivative(param) {
        const [a, b] = this.dependsOn;
        return `${a.ref()}<${b.ref()} ? ${a.derivRef(param)} : ${b.derivRef(param)}`;
    }
}
class Max extends Op {
    definition() {
        return `max(${this.dependsOn.map((op) => op.ref()).join(',')})`;
    }
    derivative(param) {
        const [a, b] = this.dependsOn;
        return `${a.ref()}>${b.ref()} ? ${a.derivRef(param)} : ${b.derivRef(param)}`;
    }
}
class IfElse extends Op {
    definition() {
        const [condition, thenOp, elseOp] = this.dependsOn;
        return `${condition.ref()}?${thenOp.ref()}:${elseOp.ref()}`;
    }
    derivative(param) {
        const [condition, thenOp, elseOp] = this.dependsOn;
        return `${condition.ref()}?${thenOp.derivRef(param)}:${elseOp.derivRef(param)}`;
    }
}
class AutoDiff {
    constructor() {
        this.nextID = 0;
        this.params = {};
        this.outputs = {};
        this.derivOutputs = {};
    }
    getNextID() {
        const id = this.nextID;
        this.nextID++;
        return id;
    }
    convertVal(param) {
        if (param instanceof Op) {
            return param;
        }
        else {
            return this.val(param);
        }
    }
    convertVals(params) {
        return params.map((param) => this.convertVal(param));
    }
    val(n) { return new Value(this, n); }
    sum(...params) { return new Sum(this, ...this.convertVals(params)); }
    add(...params) { return new Sum(this, ...this.convertVals(params)); }
    sub(a, b) {
        const [opA, opB] = this.convertVals([a, b]);
        return this.sum(opA, this.neg(opB));
    }
    neg(v) { return new Neg(this, this.convertVal(v)); }
    mult(...params) {
        if (params.length === 2) {
            return new Mult(this, ...this.convertVals(params));
        }
        else if (params.length > 2) {
            return new Mult(this, this.convertVals(params.slice(0, 1))[0], this.mult(...params.slice(1)));
        }
        else {
            throw new Error(`mult() called with too few arguments: ${params}`);
        }
    }
    div(a, b) {
        const [opA, opB] = this.convertVals([a, b]);
        return new Div(this, opA, opB);
    }
    pow(a, b) {
        const [opA, opB] = this.convertVals([a, b]);
        return new Pow(this, opA, opB);
    }
    sqrt(v) { return new Pow(this, this.convertVal(v), this.val(0.5)); }
    sin(v) { return new Sin(this, this.convertVal(v)); }
    cos(v) { return new Cos(this, this.convertVal(v)); }
    tan(v) {
        const op = this.convertVal(v);
        return this.div(this.sin(op), this.cos(op));
    }
    mix(a, b, mix) { return new Mix(this, ...this.convertVals([a, b, mix])); }
    clamp(v, min, max) { return new Clamp(this, ...this.convertVals([v, min, max])); }
    min(a, b) { return new Min(this, ...this.convertVals([a, b])); }
    max(a, b) { return new Max(this, ...this.convertVals([a, b])); }
    ifelse(cond, thenOp, elseOp) { return new IfElse(this, ...this.convertVals([cond, thenOp, elseOp])); }
    e() { return this.val(Math.E); }
    pi() { return this.val(Math.PI); }
    param(name) {
        const op = new Param(this, name);
        this.params[name] = op;
        return op;
    }
    output(name, op) {
        this.outputs[name] = op;
    }
    outputDeriv(name, param, op) {
        const paramName = typeof param === 'string' ? param : param.name;
        this.derivOutputs[paramName] = this.derivOutputs[paramName] || {};
        this.derivOutputs[paramName][name] = op;
    }
    gen() {
        let code = '';
        const deps = new Set();
        for (const name in this.outputs) {
            for (const dep of this.outputs[name].deepDependencies().values()) {
                deps.add(dep);
            }
            deps.add(this.outputs[name]);
        }
        for (const param in this.derivOutputs) {
            for (const name in this.derivOutputs[param]) {
                for (const dep of this.derivOutputs[param][name].deepDependencies().values()) {
                    deps.add(dep);
                }
                deps.add(this.derivOutputs[param][name]);
            }
        }
        for (const dep of deps.values()) {
            code += dep.initializer();
        }
        for (const name in this.outputs) {
            code += `float ${name}=${this.outputs[name].ref()};\n`;
        }
        for (const param in this.derivOutputs) {
            const paramOp = this.params[param];
            const derivDeps = new Set();
            for (const name in this.derivOutputs[param]) {
                for (const dep of this.derivOutputs[param][name].deepDependencies().values()) {
                    derivDeps.add(dep);
                }
                derivDeps.add(this.derivOutputs[param][name]);
            }
            for (const dep of derivDeps.values()) {
                code += dep.derivInitializer(paramOp);
            }
            for (const name in this.derivOutputs[param]) {
                code += `float ${name}=${this.derivOutputs[param][name].derivRef(paramOp)};\n`;
            }
        }
        return code;
    }
    static gen(cb) {
        const ad = new AutoDiff();
        cb(ad);
        return ad.gen();
    }
}
exports.AutoDiff = AutoDiff;
window.AutoDiff = window.AutoDiff || AutoDiff;

})();

/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
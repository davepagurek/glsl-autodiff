{"version":3,"file":"configuration.js","sourceRoot":"","sources":["../src/configuration.ts"],"names":[],"mappings":"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","sourcesContent":["import { resolve, dirname } from 'path';\nimport type * as _ts from 'typescript';\nimport { CreateOptions, DEFAULTS, TSCommon, TsConfigOptions } from './index';\nimport { getDefaultTsconfigJsonForNodeVersion } from './tsconfigs';\nimport { createRequire } from './util';\n\n/**\n * TypeScript compiler option values required by `ts-node` which cannot be overridden.\n */\nconst TS_NODE_COMPILER_OPTIONS = {\n  sourceMap: true,\n  inlineSourceMap: false,\n  inlineSources: true,\n  declaration: false,\n  noEmit: false,\n  outDir: '.ts-node',\n};\n\n/*\n * Do post-processing on config options to support `ts-node`.\n */\nfunction fixConfig(ts: TSCommon, config: _ts.ParsedCommandLine) {\n  // Delete options that *should not* be passed through.\n  delete config.options.out;\n  delete config.options.outFile;\n  delete config.options.composite;\n  delete config.options.declarationDir;\n  delete config.options.declarationMap;\n  delete config.options.emitDeclarationOnly;\n\n  // Target ES5 output by default (instead of ES3).\n  if (config.options.target === undefined) {\n    config.options.target = ts.ScriptTarget.ES5;\n  }\n\n  // Target CommonJS modules by default (instead of magically switching to ES6 when the target is ES6).\n  if (config.options.module === undefined) {\n    config.options.module = ts.ModuleKind.CommonJS;\n  }\n\n  return config;\n}\n\n/**\n * Load TypeScript configuration. Returns the parsed TypeScript config and\n * any `ts-node` options specified in the config file.\n *\n * Even when a tsconfig.json is not loaded, this function still handles merging\n * compilerOptions from various sources: API, environment variables, etc.\n *\n * @internal\n */\nexport function readConfig(\n  cwd: string,\n  ts: TSCommon,\n  rawApiOptions: CreateOptions\n): {\n  /**\n   * Path of tsconfig file if one was loaded\n   */\n  configFilePath: string | undefined;\n  /**\n   * Parsed TypeScript configuration with compilerOptions merged from all other sources (env vars, etc)\n   */\n  config: _ts.ParsedCommandLine;\n  /**\n   * ts-node options pulled from `tsconfig.json`, NOT merged with any other sources.  Merging must happen outside\n   * this function.\n   */\n  tsNodeOptionsFromTsconfig: TsConfigOptions;\n} {\n  let config: any = { compilerOptions: {} };\n  let basePath = cwd;\n  let configFilePath: string | undefined = undefined;\n  const projectSearchDir = resolve(cwd, rawApiOptions.projectSearchDir ?? cwd);\n\n  const {\n    fileExists = ts.sys.fileExists,\n    readFile = ts.sys.readFile,\n    skipProject = DEFAULTS.skipProject,\n    project = DEFAULTS.project,\n  } = rawApiOptions;\n\n  // Read project configuration when available.\n  if (!skipProject) {\n    configFilePath = project\n      ? resolve(cwd, project)\n      : ts.findConfigFile(projectSearchDir, fileExists);\n\n    if (configFilePath) {\n      const result = ts.readConfigFile(configFilePath, readFile);\n\n      // Return diagnostics.\n      if (result.error) {\n        return {\n          configFilePath,\n          config: { errors: [result.error], fileNames: [], options: {} },\n          tsNodeOptionsFromTsconfig: {},\n        };\n      }\n\n      config = result.config;\n      basePath = dirname(configFilePath);\n    }\n  }\n\n  // Fix ts-node options that come from tsconfig.json\n  const tsNodeOptionsFromTsconfig: TsConfigOptions = Object.assign(\n    {},\n    filterRecognizedTsConfigTsNodeOptions(config['ts-node'])\n  );\n\n  // Remove resolution of \"files\".\n  const files =\n    rawApiOptions.files ?? tsNodeOptionsFromTsconfig.files ?? DEFAULTS.files;\n  if (!files) {\n    config.files = [];\n    config.include = [];\n  }\n\n  // Only if a config file is *not* loaded, load an implicit configuration from @tsconfig/bases\n  const skipDefaultCompilerOptions = configFilePath != null;\n  const defaultCompilerOptionsForNodeVersion = skipDefaultCompilerOptions\n    ? undefined\n    : {\n        ...getDefaultTsconfigJsonForNodeVersion(ts).compilerOptions,\n        types: ['node'],\n      };\n\n  // Merge compilerOptions from all sources\n  config.compilerOptions = Object.assign(\n    {},\n    // automatically-applied options from @tsconfig/bases\n    defaultCompilerOptionsForNodeVersion,\n    // tsconfig.json \"compilerOptions\"\n    config.compilerOptions,\n    // from env var\n    DEFAULTS.compilerOptions,\n    // tsconfig.json \"ts-node\": \"compilerOptions\"\n    tsNodeOptionsFromTsconfig.compilerOptions,\n    // passed programmatically\n    rawApiOptions.compilerOptions,\n    // overrides required by ts-node, cannot be changed\n    TS_NODE_COMPILER_OPTIONS\n  );\n\n  const fixedConfig = fixConfig(\n    ts,\n    ts.parseJsonConfigFileContent(\n      config,\n      {\n        fileExists,\n        readFile,\n        readDirectory: ts.sys.readDirectory,\n        useCaseSensitiveFileNames: ts.sys.useCaseSensitiveFileNames,\n      },\n      basePath,\n      undefined,\n      configFilePath\n    )\n  );\n\n  if (tsNodeOptionsFromTsconfig.require) {\n    // Modules are found relative to the tsconfig file, not the `dir` option\n    const tsconfigRelativeRequire = createRequire(configFilePath!);\n    tsNodeOptionsFromTsconfig.require = tsNodeOptionsFromTsconfig.require.map(\n      (path: string) => {\n        return tsconfigRelativeRequire.resolve(path);\n      }\n    );\n  }\n\n  return { configFilePath, config: fixedConfig, tsNodeOptionsFromTsconfig };\n}\n\n/**\n * Given the raw \"ts-node\" sub-object from a tsconfig, return an object with only the properties\n * recognized by \"ts-node\"\n */\nfunction filterRecognizedTsConfigTsNodeOptions(\n  jsonObject: any\n): TsConfigOptions {\n  if (jsonObject == null) return jsonObject;\n  const {\n    compiler,\n    compilerHost,\n    compilerOptions,\n    emit,\n    files,\n    ignore,\n    ignoreDiagnostics,\n    logError,\n    preferTsExts,\n    pretty,\n    require,\n    skipIgnore,\n    transpileOnly,\n    typeCheck,\n    transpiler,\n  } = jsonObject as TsConfigOptions;\n  const filteredTsConfigOptions = {\n    compiler,\n    compilerHost,\n    compilerOptions,\n    emit,\n    files,\n    ignore,\n    ignoreDiagnostics,\n    logError,\n    preferTsExts,\n    pretty,\n    require,\n    skipIgnore,\n    transpileOnly,\n    typeCheck,\n    transpiler,\n  };\n  // Use the typechecker to make sure this implementation has the correct set of properties\n  const catchExtraneousProps: keyof TsConfigOptions = (null as any) as keyof typeof filteredTsConfigOptions;\n  const catchMissingProps: keyof typeof filteredTsConfigOptions = (null as any) as keyof TsConfigOptions;\n  return filteredTsConfigOptions;\n}\n"]}